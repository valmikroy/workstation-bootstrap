snippet _v "quick variable"
	${1} := ${2}
endsnippet

snippet _vv "define variable"
	var ${1:a} ${2:type} = ${3:value}
endsnippet

snippet _vvv "define variable list"
	var (
		${1:a} ${2:type} = ${3:value}
	)
endsnippet

snippet _vl "quick extend the list var"
		${1:a} ${2:type} = ${3:value}
endsnippet

snippet _p  "package name"
	package ${1:main}
endsnippet

snippet _im "import"
	import (
			${1:"fmt"}
			${2:"io"}
	)	
endsnippet

snippet _fun  "function"
	func ${1:funcName}(${2}) ${3:error} {
		${4}
	}
	${0}		
endsnippet

snippet _meth  "method"
	func (${1:receiver} ${2:type}) ${3:funcName}(${4}) ${5:error} {
		${6}
	}
	${0}
endsnippet

snippet _if "single if statement"
	if ${1:/* condition */} {
		${2:${VISUAL}}
	}
endsnippet

snippet _ife "if else condition"
	if ${1:/* condition */} {
		${2:${VISUAL}}
	} else {
		${0}
	}
endsnippet

snippet _el  "else"
	else {
		${0:${VISUAL}}
	}
endsnippet

snippet _ir  "error if condition"
	if err != nil {
		return err
	}
	${0}
endsnippet

snippet _irr  "error if condition"
	if err := ${1:myfunc()}; err != nil {
		return err
	}
	${0}
endsnippet

snippet _forr  "for loop with range"
	for ${1:e} := range ${2:collection} {
	${0:${VISUAL}}
	}
endsnippet

snippet _fori  "for loop with a counter"
	for ${2:i} := 0; $2 < ${1:count}; $2${3:++} {
		${0:${VISUAL}}
	}
endsnippet

snippet _sw "switch"
	switch ${1:var} {
	case ${2:value1}:
		${3}
	case ${4:value2}:
		${5}
	default:
		${0}
	}
endsnippet

snippet _ts "composite literals"
	type ${1:name} struct {
		${2:attrName} ${3:attrType}
	}
endsnippet	

snippet _pl  "println"
	fmt.Println(${1})
endsnippet
